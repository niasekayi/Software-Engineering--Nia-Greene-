

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "list.h"

list_t *list_alloc() { 
  list_t* mylist = (list_t *) malloc(sizeof(list_t)); 
  if (mylist == NULL) return NULL;
  mylist->head = NULL;
  return mylist;
}

void list_free(list_t *l) {
  if (l == NULL) return;
  node_t *curr = l->head;
  node_t *next;
  while (curr != NULL) {
    next = curr->next;
    free(curr);
    curr = next;
  }
  free(l);
}

void list_print(list_t *l) {
  if (l == NULL || l->head == NULL) {
    printf("NULL\n");
    return;
  }
  node_t *curr = l->head;
  while (curr != NULL) {
    printf("%d->", curr->value);
    curr = curr->next;
  }
  printf("NULL\n");
}

char * listToString(list_t *l) {
  if (l == NULL || l->head == NULL) {
    char *empty = (char *) malloc(5);
    if (!empty) return NULL;
    strcpy(empty, "NULL");
    return empty;
  }

  /* Count nodes to estimate buffer size */
  int nodes = 0;
  node_t *tmp = l->head;
  while (tmp) { nodes++; tmp = tmp->next; }

  size_t bufsize = (size_t)nodes * 15 + 10;
  char *buf = (char *) malloc(bufsize);
  if (!buf) return NULL;
  size_t left = bufsize;
  char *p = buf;
  int written;
  node_t *curr = l->head;

  while (curr != NULL) {
    written = snprintf(p, left, "%d->", curr->value);
    if (written < 0 || (size_t)written >= left) break;
    p += written;
    left -= (size_t)written;
    curr = curr->next;
  }
  snprintf(p, left, "NULL");
  return buf;
}

node_t * getNode(elem value) {
  node_t *mynode = (node_t *) malloc(sizeof(node_t));
  if (!mynode) return NULL;
  mynode->value = value;
  mynode->next = NULL;
  return mynode;
}

int list_length(list_t *l) {
  if (l == NULL) return 0;
  int count = 0;
  node_t *curr = l->head;
  while (curr != NULL) {
    count++;
    curr = curr->next;
  }
  return count;
}

void list_add_to_back(list_t *l, elem value) {
  if (l == NULL) return;
  node_t *newnode = getNode(value);
  if (!newnode) return;
  if (l->head == NULL) {
    l->head = newnode;
    return;
  }
  node_t *curr = l->head;
  while (curr->next != NULL) curr = curr->next;
  curr->next = newnode;
}

void list_add_to_front(list_t *l, elem value) {
  if (l == NULL) return;
  node_t *cur_node = getNode(value);
  if (!cur_node) return;
  cur_node->next = l->head;
  l->head = cur_node;
}

void list_add_at_index(list_t *l, elem value, int index) {
  /* index is 1-based. valid indices: 1 .. length+1.
     Out-of-range indices do nothing. */
  if (l == NULL) return;
  int len = list_length(l);
  if (index < 1 || index > len + 1) return;

  if (index == 1) {
    list_add_to_front(l, value);
    return;
  }

  node_t *prev = l->head;
  for (int i = 1; i < index - 1; i++) {
    if (prev == NULL) return; // should not happen due to bounds check
    prev = prev->next;
  }

  node_t *newnode = getNode(value);
  if (!newnode) return;
  newnode->next = prev->next;
  prev->next = newnode;
}

elem list_remove_from_front(list_t *l) {
  if (l == NULL || l->head == NULL) return -1;
  node_t *temp = l->head;
  elem val = temp->value;
  l->head = temp->next;
  free(temp);
  return val;
}

elem list_remove_from_back(list_t *l) {
  if (l == NULL || l->head == NULL) return -1;
  if (l->head->next == NULL) {
    elem val = l->head->value;
    free(l->head);
    l->head = NULL;
    return val;
  }
  node_t *curr = l->head;
  while (curr->next->next != NULL) curr = curr->next;
  elem val = curr->next->value;
  free(curr->next);
  curr->next = NULL;
  return val;
}

elem list_remove_at_index(list_t *l, int index) {
  /* index is 1-based. valid indices: 1 .. length.
     Return -1 for invalid index or empty list. */
  if (l == NULL || l->head == NULL) return -1;
  int len = list_length(l);
  if (index < 1 || index > len) return -1;

  if (index == 1) return list_remove_from_front(l);

  node_t *prev = l->head;
  for (int i = 1; i < index - 1; i++) {
    prev = prev->next;
  }
  node_t *to_remove = prev->next;
  if (to_remove == NULL) return -1; // safety
  elem val = to_remove->value;
  prev->next = to_remove->next;
  free(to_remove);
  return val;
}

bool list_is_in(list_t *l, elem value) {
  if (l == NULL) return false;
  node_t *curr = l->head;
  while (curr != NULL) {
    if (curr->value == value) return true;
    curr = curr->next;
  }
  return false;
}

elem list_get_elem_at(list_t *l, int index) {
  if (l == NULL || index <= 0) return -1;
  int i = 1;
  node_t *curr = l->head;
  while (curr != NULL) {
    if (i == index) return curr->value;
    curr = curr->next;
    i++;
  }
  return -1;
}

int list_get_index_of(list_t *l, elem value) {
  if (l == NULL) return -1;
  int i = 1;
  node_t *curr = l->head;
  while (curr != NULL) {
    if (curr->value == value) return i;
    curr = curr->next;
    i++;
  }
  return -1;
}
